The Software Testing Lifecycle (STLC) is a conceptual framework and process model for describing all the activities involved in the process to ensure software actually does what it was designed to do, without defects, and support the development team in correcting defects.  This assurance is called validation.   

Traditionally, QA validation of software occurred only at the end of a development process. As software development itself became more iterative and with more shared responsibility across stages, the stages of the STLC came to mirror and parallel those of the SDLC:

Requirements Analysis. What functionality needs to be tested? How can quality of the software be validated?
Test Planning. Develop the testing plan for unit, integration, system, and user acceptance tests.  Determine test strategy, methods, and resources required.
Test Design. Develop test cases, test scripts, and test data. Ensure test cases are traceable back to the requirements.
Test Environment Setup. Build and configure the hardware and software environment that will be used to conduct testing.
Test Execution. Conduct testing using the test cases, and test scripts if automated testing is being employed. Unit, integration, system, and acceptance tests are performed during the relevant stages of the development lifecycle. Communicate defects back to the development team. Retest once defects have been corrected.
Test Closeout. Complete all retests as needed. Analyse defect metrics and test results to document software quality.  Prepare and deliver final validation documentation as needed. Communicate insights that can be used to improve the overall development process.
With the testing lifecycle paired to the development lifecycle, more comprehensive and more timely test results are available at each point in the development process, resulting in faster overall deployment of production software with higher overall quality. 

Other benefits of this structured lifecycle approach to testing include:

A systematic quality process that is repeatable, measurable, and continuously improvable
Defects can be identified earlier in the development cycle
Security issues can be identified earlier in the development cycle
Lower maintenance costs
Higher client/customer satisfaction
More stable and consistent system performance
To reduce risk and identify defects as early as possible, different levels of software testing are performed at different points in the development cycle:

Unit tests. A code-level check, performed by members of the development team, to see if individual components of code are working correctly.
Integration tests. Tests of the connectivity and data transfer between unit tested code components or other integration points in the system. Also often done by the development team, but could also be done by a QA team.
System tests. Also known as end-to-end testing, system tests are conducted to test the completed, fully integrated software application from a technical point of view, checking that each input leads to the correct output. Often done by a QA testing team at the end of each release cycle. Often referred to as SIT (system integration testing).
Acceptance tests. Tests performed by a QA team or a team of representative end users from the client to test the usability and functionality from the end userâ€™s perspective.   Often referred to as UAT (user acceptance testing). Usually the last step before deployment to production and go-live.
Regression tests. Systematic retesting of functionality that might have been affected by a modification made to other code to verify no unintended effects of the change. Usually performed by whoever did SIT or UAT testing.
 Regression testing looks for unintended side effects of modifications to other code.